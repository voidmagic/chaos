import collections

import math
import numpy as np

m2o = """
 ar bg cs de el es fa fr he hr hu id it ja ko nl pl pt ro ru sk sr sv th tr uk vi zh
ar 0.00689502 0.00449100 -0.00159752 0.00365619 -0.00010293 0.01622222 -0.00044744 -0.00353282 0.00726288 0.00355623 0.00126282 -0.00014106 0.00752320 -0.00251042 0.00051385 0.00765096 0.00040451 0.01418040 0.00551238 0.00299300 -0.00181861 0.00520583 0.00346776 -0.01114386 0.00521607 -0.00621304 0.00238357 0.00260828
bg 0.04654299 0.03091387 0.01460745 0.02735188 0.03345389 0.02607622 0.02813493 0.04046963 0.02357540 0.01191424 0.03480863 0.00860293 0.03053491 0.03212384 0.02190818 0.02044304 0.01928616 0.01977198 0.03283623 0.04016762 0.00596206 0.02305314 0.01030848 0.01837518 0.03348786 0.02181074 0.01343657 0.01973971
cs 0.01654653 0.01305986 0.01127447 0.01597850 0.01530923 0.01414768 0.01394486 0.03341092 0.01359133 0.01106536 0.01452731 0.00526832 0.01600682 0.02404043 0.02192382 0.01367481 0.01348153 0.01402812 0.01681301 0.02328664 0.00576946 0.01811578 0.00848391 0.01357524 0.02253606 0.01023073 0.01627155 0.01353647
de 0.03094175 0.00320104 0.00502310 0.01338765 0.00701653 0.03583960 0.01305867 0.01945936 0.02936891 0.01237587 0.01592756 0.00126617 0.02852864 0.01855074 0.03166766 0.02787501 0.01685920 0.02114749 0.02359941 0.01987662 0.00292892 0.01142756 -0.00289898 -0.01181539 0.02802489 0.00425470 0.02373745 0.05111369
el 0.06901850 0.03653582 0.02248640 0.05046110 0.02917338 0.06652742 0.04586045 0.05482019 0.06504047 0.02681435 0.04556838 0.02794831 0.05777391 0.05105737 0.06030742 0.05127874 0.04321554 0.05406678 0.04988265 0.06228980 0.01306039 0.03884631 0.01506067 0.00520639 0.05818893 0.02583003 0.04695437 0.05599856
es -0.02433260 -0.02799254 -0.01924976 -0.02118679 -0.05459563 -0.01915760 -0.02511362 -0.03726810 -0.01547561 -0.01483159 -0.02563845 -0.01010563 -0.01945688 -0.02397436 -0.02660321 -0.01747336 -0.02440893 -0.01981864 -0.01484027 -0.03135802 -0.01633820 -0.02338759 -0.00751824 -0.05415099 -0.01834933 -0.02271325 -0.01902380 -0.01325101
fa 0.03486392 0.01969239 0.00832034 0.02911711 0.02014834 0.03530544 0.01957291 0.03776280 0.02798637 0.01442393 0.02807954 -0.00567801 0.02489854 0.02706935 0.03287363 0.03148002 0.02247494 0.02237595 0.03041667 0.03386861 0.00472797 0.01592007 0.00046799 -0.00541420 0.02393344 0.01648116 0.01943776 0.03390500
fr -0.01202004 -0.00347197 0.00188090 -0.00299828 0.00609014 -0.02186804 -0.00269521 -0.00198097 -0.01789932 -0.00909814 0.00143639 -0.00915140 -0.01865411 -0.02659131 -0.02114842 -0.01725402 -0.01439053 -0.01601151 -0.01996545 -0.00973323 -0.00014903 -0.00498906 -0.00530745 0.01578317 -0.01485646 0.00344145 -0.02200407 -0.04588186
he 0.00119672 -0.00770735 -0.00762284 -0.00666999 -0.02363601 0.01501036 -0.01431035 -0.02277111 0.00935061 0.00147085 -0.01068751 0.00248266 0.00493019 -0.00895288 -0.00031139 0.00554229 -0.00643046 0.00512654 -0.00227417 -0.00389602 -0.00605599 0.00308912 0.00032043 -0.03229169 -0.00413403 -0.01358244 0.00013216 0.00015851
hr 0.00774471 -0.00132668 0.00193876 0.00666918 -0.03739139 0.02338519 -0.00002393 -0.01611876 0.01806210 0.00296949 -0.00537510 0.00780207 0.01411982 -0.00270519 0.00583342 0.01890151 0.00509851 0.01452991 0.01367000 0.00231404 -0.00308267 0.00245369 0.00168532 -0.04956357 0.01915091 -0.01839037 0.01476793 0.02183842
hu 0.01916696 -0.00324819 -0.00420478 0.01218250 -0.03283079 0.04237687 0.01170840 -0.00899839 0.03102331 0.01402289 -0.00262029 0.00953933 0.02172634 -0.00009387 0.02195417 0.02832473 0.00919556 0.02602347 0.01722283 0.01621768 -0.00309280 0.00930827 0.00276895 -0.02205146 0.02522984 -0.01270060 0.02342973 0.03194340
id 0.04515660 0.02996150 0.02260312 0.02934100 0.02491738 0.04615936 0.03293859 0.03958800 0.03263001 0.02235683 0.02101242 0.01801566 0.03705329 0.04601708 0.05375867 0.03236923 0.02691829 0.02611041 0.02436838 0.03594205 0.01440188 0.02231533 0.01306863 0.01110869 0.04029856 0.03059648 0.03801628 0.04682618
it 0.02685085 -0.00436151 -0.00470222 0.00748235 -0.01063439 0.04368148 0.00436830 -0.00422764 0.03567825 0.00966229 0.00761275 0.00869372 0.02918628 0.02226058 0.03731709 0.03590737 0.01253701 0.02023409 0.01867249 0.01205446 -0.00129374 0.01839267 0.00168329 -0.01234266 0.02794920 -0.00449810 0.02577807 0.06686765
ja 0.04221431 0.01387698 0.00776051 0.02658936 -0.01029078 0.06989544 0.02819244 0.01160725 0.04459239 0.02251588 0.01724417 0.01858958 0.05078027 0.03300638 0.05137490 0.05038352 0.03276994 0.04829888 0.04229632 0.03225928 0.00290438 0.02642675 0.00969404 -0.03347585 0.04379451 0.00630094 0.04822590 0.07531959
ko 0.04463252 0.01615587 0.01477925 0.03361778 0.00068125 0.05446392 0.02782325 0.02184269 0.05289923 0.02455883 0.02786032 0.01640240 0.05330310 0.03406131 0.04169565 0.03361514 0.03040331 0.04352822 0.03717612 0.03432302 0.00705647 0.02434339 0.01042501 -0.00426510 0.04252734 0.00935009 0.04315073 0.04393523
nl 0.04027984 0.01053899 0.00646693 0.02215725 -0.02644577 0.06777225 0.01969977 0.01286150 0.04879967 0.02282690 0.02237366 0.02101064 0.04774393 0.03180022 0.05322421 0.04543512 0.02598698 0.04435695 0.04337863 0.03626529 0.00258126 0.02581947 0.01081162 -0.06370040 0.04828110 -0.00052743 0.04633581 0.07867284
pl 0.05224342 0.02653833 0.01550858 0.03553163 0.02723263 0.08144975 0.03695122 0.03681138 0.05645471 0.03016004 0.03226242 0.02380127 0.05227244 0.04707014 0.05749898 0.05483534 0.04481578 0.05307145 0.04750564 0.04603836 0.00584069 0.03715762 0.00911669 0.02084354 0.05703782 0.02178602 0.05302193 0.08202676
pt 0.02195127 0.00236947 0.00372301 0.00807964 -0.00948521 0.03527256 0.00810145 -0.00104075 0.02264827 0.01229790 0.00448423 0.01685040 0.02321276 0.01760268 0.04177365 0.03146631 0.01022916 0.01878373 0.01892324 0.01232251 0.00374644 0.01889645 0.00347527 -0.00346689 0.03631579 -0.00038507 0.03864783 0.05699526
ro 0.08321797 0.05034544 0.02518705 0.06267369 0.04442910 0.11384423 0.06740349 0.07533073 0.08388105 0.04747749 0.05644444 0.03759089 0.08961798 0.07142720 0.08747728 0.08000913 0.05847607 0.08266509 0.07886601 0.07792579 0.01709256 0.05719644 0.02202998 0.04828834 0.08953306 0.03356938 0.08029616 0.08970255
ru 0.04090019 0.01903664 0.01166073 0.02834149 0.00178046 0.05435834 0.02071661 0.01693580 0.04139040 0.02391383 0.02428310 0.01764152 0.04300107 0.03550546 0.05228336 0.04996418 0.02623680 0.04792032 0.03923259 0.03696915 0.00774462 0.03081579 0.00682563 -0.03451395 0.04873599 0.00978719 0.04126826 0.07187872
sk 0.03813730 0.02379139 0.01431853 0.03022157 0.01752427 0.05683485 0.02465903 0.03710551 0.03773417 0.02437614 0.03042908 0.01385216 0.03866069 0.03524529 0.04927053 0.03744066 0.03189896 0.03427886 0.04275992 0.04330249 0.00714349 0.03043557 0.00895646 -0.02882563 0.03835675 0.01492077 0.03540948 0.05650307
sr 0.01906720 0.00426188 0.00087006 0.01775263 -0.03445538 0.03762530 0.00511469 -0.00797842 0.02640122 0.00910324 0.00720924 0.01228485 0.03035691 0.00128073 0.02122649 0.02515938 0.01336262 0.02495921 0.01573387 0.01373411 -0.00041643 0.01228088 0.00771751 -0.04283072 0.02689580 -0.00645317 0.02049513 0.03371290
sv 0.03588409 0.00814263 0.00941208 0.02195506 -0.00195537 0.04583118 0.02359290 0.02334754 0.03390199 0.01607010 0.02004261 0.01587673 0.03838797 0.02110281 0.02924068 0.03454583 0.02012847 0.02639816 0.03083605 0.02603340 0.00350498 0.02493315 0.01171097 -0.02112272 0.03294620 0.00599261 0.02804273 0.03442813
th 0.06235047 0.04003961 0.02825519 0.04447311 0.07910016 0.03094001 0.05461203 0.07607280 0.04557580 0.01814968 0.05246451 0.01260942 0.04120563 0.04689740 0.03360580 0.02241875 0.04190151 0.03397077 0.03826728 0.06287624 0.01801798 0.03615848 0.01132411 0.09937650 0.03762101 0.04159697 0.03071914 0.00778516
tr 0.00476474 -0.00710939 -0.01195999 0.00195737 -0.01320573 0.04709033 -0.00048645 -0.00361143 0.03026717 0.01079808 0.01139051 0.00375769 0.03221623 0.01662731 0.02433415 0.01635481 0.00131942 0.01129586 0.01233061 0.00799817 -0.00699576 0.01840191 -0.00055446 -0.01884851 0.01610742 -0.00461262 0.01811976 0.05371334
uk 0.04804925 0.02635008 0.01724482 0.03275082 0.05278939 0.03890863 0.03820585 0.05141118 0.03426645 0.01253185 0.03900065 0.01467647 0.03837570 0.04132862 0.03613323 0.02469792 0.03201624 0.03120691 0.02981077 0.04163188 0.01152276 0.03002728 0.01068591 0.06169975 0.03556961 0.02703223 0.02834708 0.04285423
vi 0.06174236 0.02724798 0.01708993 0.03699863 0.01889651 0.07769617 0.03726261 0.04244963 0.06005509 0.03284687 0.03396808 0.02438711 0.06523259 0.05154706 0.06632476 0.05085070 0.03733345 0.05474208 0.05131146 0.05079400 0.01080049 0.03816726 0.01509937 0.00263074 0.06163190 0.01810218 0.05652465 0.07027936
zh 0.01255378 0.00403177 0.00129764 0.00633180 -0.01294797 0.01836017 0.00308534 -0.00532949 0.01406875 0.00622882 -0.00054050 0.00720483 0.00892013 0.00958220 0.01880015 0.02129436 0.00704218 0.01645164 0.00845516 0.00895279 -0.00111770 0.00952615 0.00079074 -0.00912125 0.02135325 0.00000020 0.01672401 0.02279638
"""


matrix = m2o.strip().split("\n")
header = matrix[0].strip().split()
affinity = collections.defaultdict(dict)

for line in matrix[1:]:
    line = line.strip().split()
    aux_lang = line[0]
    for target_lang, score in zip(header, line[1:]):
        affinity[target_lang][aux_lang] = float(score)

for lang1 in header:
    print(lang1, end=":\t")
    for lang2 in header:
        if affinity[lang1][lang2] > 0 or lang1 == lang2:
            print(lang2, end="\t")
    print()

n_clusters = 2
n_langs = len(header)


def gen_task_combinations(tasks, rtn, index, path, path_dict):
    if index >= len(tasks):
        return

    for i in range(index, len(tasks)):
        cur_task = tasks[i]
        new_path = path
        new_dict = {k: v for k, v in path_dict.items()}

        # Building from a tree with two or more tasks...
        if new_path:
            new_dict[cur_task] = 0.
            for prev_task in path_dict:
                new_dict[prev_task] += revised_integrals[prev_task][cur_task]
                new_dict[cur_task] += revised_integrals[cur_task][prev_task]
            new_path = '{}|{}'.format(new_path, cur_task)
            rtn[new_path] = new_dict
        else:  # First element in a new-formed tree
            new_dict[cur_task] = 0.
            new_path = cur_task

        gen_task_combinations(tasks, rtn, i + 1, new_path, new_dict)

        if '|' not in new_path:
            new_dict[cur_task] = -1e6
            rtn[new_path] = new_dict


def select_groups(index, cur_group, best_group, best_val, splits):
    # Check if this group covers all tasks.
    task_set = set()
    for group in cur_group:
        for task in group.split('|'): task_set.add(task)
    if len(task_set) == num_tasks:
        best_tasks = {task: -1e6 for task in task_set}

        # Compute the per-task best scores for each task and average them together.
        for group in cur_group:
            for task in cur_group[group]:
                best_tasks[task] = max(best_tasks[task], cur_group[group][task])
        group_avg = np.mean(list(best_tasks.values()))

        # Compare with the best grouping seen thus far.
        if group_avg > best_val[0]:
            print(cur_group)
            best_val[0] = group_avg
            best_group.clear()
            for entry in cur_group:
                best_group[entry] = cur_group[entry]

    # Base case.
    if len(cur_group.keys()) == splits:
        return

    # Back to combinatorics
    for i in range(index, len(rtn_tup)):
        selected_group, selected_dict = rtn_tup[i]

        new_group = {k: v for k, v in cur_group.items()}
        new_group[selected_group] = selected_dict

        if len(new_group.keys()) <= splits:
            select_groups(i + 1, new_group, best_group, best_val, splits)


# revised_integrals = affinity
# rtn = {}
# tasks = list(revised_integrals.keys())
# num_tasks = len(tasks)
# gen_task_combinations(tasks=tasks, rtn=rtn, index=0, path='', path_dict={})
#
# print(rtn)


#
# for group in rtn:
#     if '|' in group:
#         for task in rtn[group]:
#             rtn[group][task] /= (len(group.split('|')) - 1)
#
# print(rtn)
# assert (len(rtn.keys()) == 2 ** len(revised_integrals.keys()) - 1)
# rtn_tup = [(key, val) for key, val in rtn.items()]
#
# selected_group = {}
# selected_val = [-100000000]
# select_groups(index=0, cur_group={}, best_group=selected_group, best_val=selected_val, splits=3)
# print(selected_group)
# print(selected_val)
